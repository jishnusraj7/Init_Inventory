package com.indocosmo.mrp.web.masters.profitcategory.dao;

import java.beans.PropertyDescriptor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.sql.PreparedStatement;
import java.util.HashMap;

import javax.persistence.Column;

import com.indocosmo.mrp.utils.core.ReflectionUtil;
import com.indocosmo.mrp.utils.core.dbutils.DBUtil;
import com.indocosmo.mrp.utils.core.persistence.annotation.Counter;
import com.indocosmo.mrp.utils.core.persistence.annotation.Id;
import com.indocosmo.mrp.utils.core.persistence.enums.GenerationType;
import com.indocosmo.mrp.web.core.base.application.ApplicationContext;
import com.indocosmo.mrp.web.core.base.dao.MasterBaseDao;
import com.indocosmo.mrp.web.core.counter.dao.CounterDao;
import com.indocosmo.mrp.web.masters.profitcategory.model.ProfitCategory;


public class ProfitCategoryDao extends MasterBaseDao<ProfitCategory> implements IProfitCategoryDao{
	private CounterDao counterDao;
	/**
	 * @param context
	 */
	public ProfitCategoryDao(ApplicationContext context) {

		super(context);
		counterDao=new CounterDao(getContext());
		// TODO Auto-generated constructor stub
	}

	/* (non-Javadoc)
	 * @see com.indocosmo.mrp.web.core.base.dao.GeneralDao#getNewModelInstance()
	 */
	@Override
	public ProfitCategory getNewModelInstance() {

		return new ProfitCategory();
		
	}

	/* (non-Javadoc)
	 * @see com.indocosmo.mrp.web.core.base.dao.BaseDao#getTable()
	 */
	@Override
	public String getTable() {

		return "mrp_profit_category";
	}
	
	@Override
	protected void setValuesForInsertPS(PreparedStatement ps , ProfitCategory item) throws Exception {
	

		

	     Integer version=(Integer) context.getCurrentHttpSession().getAttribute("version");
	    
		String fieldName=null;
		Object fieledValue=null;

		final HashMap<String, PropertyDescriptor> propertyDescriptors=ReflectionUtil.getPropertyDescriptors(item.getClass());
		int index=1;

		for(Field field : ReflectionUtil.getAllFileds(item.getClass())){

			/**
			 * Column annotation
			 * Gets the column from bean
			 */
			final Column annotationColumn = (Column)field.getDeclaredAnnotation(Column.class);

			if(annotationColumn!=null && propertyDescriptors.get(field.getName())!=null){

				fieldName=null;

				/**
				 * Use the setter method to get field type and id generation type.
				 */
				final Method setterMethod=propertyDescriptors.get(field.getName()).getWriteMethod();
				final Method getterMethod=propertyDescriptors.get(field.getName()).getReadMethod();
				System.out.println("Column Name : "+annotationColumn.name());

				/**
				 * Check the Id generation type is overridden anywhere
				 */
				Id annotationId = (Id) ((setterMethod!=null && setterMethod.getDeclaredAnnotation(Id.class)!=null)?
						setterMethod.getDeclaredAnnotation(Id.class):
							((getterMethod!=null && getterMethod.getDeclaredAnnotation(Id.class)!=null)?getterMethod.getDeclaredAnnotation(Id.class):
								field.getDeclaredAnnotation(Id.class)));

				if(annotationId==null){

					fieldName=annotationColumn.name();
					field.setAccessible(true);
					Object value=field.get(item);
					fieledValue=DBUtil.modelValueToDBFieldValue(field, value,false);

				}else{

					final GenerationType genType=annotationId.generationType();
					switch (genType) {
					case IDENTITY:
						/**
						 *
						 * No need to set the filed. Id will be automatically generated by database
						 * 
						 **/ 
						fieldName=annotationColumn.name();
						field.setAccessible(true);
						
						field.set(item, null);
						fieledValue=DBUtil.modelValueToDBFieldValue(field, null);
						break;

					case COUNTER:
						/**
						 *
						 * If counter, get the id from counter table.
						 * 
						 **/ 
						fieldName=annotationColumn.name();
						field.setAccessible(true);

						Counter annotationCounter = (Counter)setterMethod.getDeclaredAnnotation(Counter.class);

					
						if(annotationCounter!=null && field.get(item) == null ){

							final String module=annotationCounter.module();
							final String key=annotationCounter.key();
							int value=-1;
							if(version==1)
							{
							 value=counterDao.getCounterFor(module, key);
							}
							else
							{
							 value=counterDao.getCounter(module, key);
							}
					
							
							Object customId=getCustomId(value);
							field.set(item, customId);
							fieledValue=DBUtil.modelValueToDBFieldValue(field, customId);

						}else if(annotationCounter!=null && field.get(item)!=null){
							
							Object value=field.get(item);
							fieledValue=DBUtil.modelValueToDBFieldValue(field, value,false);
//							
						}else 
							throw new Exception("Counter (annotaion) details not set for ID.");


						break;
					}
				}

				if(fieldName!=null){
					

						ps.setObject(index, fieledValue);

					index++;
				}
			}
		}
	
	
	}


}
